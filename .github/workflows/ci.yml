name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  SERVICE_MODE: hybrid

jobs:
  # =====================================
  # Code Quality Check
  # =====================================
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8 (if available)
      run: |
        if command -v flake8 >/dev/null 2>&1; then
          flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        else
          echo "Flake8 not installed - skipping"
        fi
    
    - name: Syntax check
      run: |
        python -m py_compile app/*.py

  # =====================================
  # Unit Tests
  # =====================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        make setup-test
    
    - name: Run unit tests
      run: |
        make test-unit
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: test_results/

  # =====================================
  # Integration Tests
  # =====================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: anomaly_db_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/anomaly_db_test
      REDIS_URL: redis://localhost:6379/0
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        make setup-test
    
    - name: Wait for services
      run: |
        sleep 10
    
    - name: Run integration tests
      run: |
        make test-integration
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test_results/

  # =====================================
  # Performance Tests
  # =====================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    env:
      REDIS_URL: redis://localhost:6379/0
      DATABASE_URL: sqlite:///test.db
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        make setup-test
    
    - name: Run performance tests
      run: |
        make test-performance
      continue-on-error: true  # Performance tests are informational
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: test_results/

  # =====================================
  # Complete CI Pipeline
  # =====================================
  ci-pipeline:
    name: Complete CI Pipeline
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: anomaly_db_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/anomaly_db_test
      REDIS_URL: redis://localhost:6379/0
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        make setup-test
    
    - name: Wait for services
      run: |
        sleep 15
    
    - name: Run complete CI pipeline
      run: |
        python run_tests.py
    
    - name: Upload CI pipeline results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ci-pipeline-results
        path: test_results/
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const resultsFile = 'test_results/latest_test_results.json';
            if (fs.existsSync(resultsFile)) {
              const results = JSON.parse(fs.readFileSync(resultsFile, 'utf8'));
              const summary = results.summary;
              
              const comment = `## üéØ CI Pipeline Results
              
              **Status**: ${summary.failed === 0 ? '‚úÖ PASSED' : '‚ùå FAILED'}
              **Duration**: ${results.total_duration}s
              **Test Suites**: ${summary.total_suites}
              **Success Rate**: ${summary.success_rate}%
              
              ### Detailed Results:
              ${results.results.map(r => 
                `- ${r.success ? '‚úÖ' : '‚ùå'} ${r.name}: ${r.duration}s`
              ).join('\n')}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not post results comment:', error);
          }

  # =====================================
  # Docker Build Test
  # =====================================
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: ci-pipeline
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: anomaly-detection-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm --name test-container -d -p 8000:8000 \
          -e DATABASE_URL=sqlite:///test.db \
          -e REDIS_URL=redis://localhost:6379 \
          anomaly-detection-api:test
        
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/healthcheck || exit 1
        
        docker stop test-container
