name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: anomaly_user
          POSTGRES_DB: anomaly_detection
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://anomaly_user:test_password@localhost:5432/anomaly_detection" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        
    - name: Run database migrations
      run: |
        python scripts/run_migrations.py
        
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --tb=short --cov=shared --cov=services --cov-report=xml
        
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --tb=short
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [training_service, inference_service, monitoring_service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d --wait
        
    - name: Wait for services to be ready
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/healthcheck; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:8001/healthcheck; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:8002/healthcheck; do sleep 5; done'
        
    - name: Run end-to-end tests
      run: |
        python -m pytest tests/integration/test_complete_workflow.py -v
        python -m pytest tests/integration/test_plot_service_workflow.py -v
        
    - name: Run performance tests
      run: |
        cd tests/performance
        python inference_load_test.py
        python training_load_test.py
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/