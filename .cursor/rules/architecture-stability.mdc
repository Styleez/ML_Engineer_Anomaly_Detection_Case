---
alwaysApply: true
---

# Architecture Stability - No Unnecessary Changes

## Core Principle: Fix Don't Replace

**NEVER create new versions or "minimal" alternatives when fixing existing code.**

### ❌ AVOID These Actions:
- Creating `app_minimal.py`, `main_simple.py`, or similar "lite" versions
- Replacing existing architecture (FastAPI + SQLAlchemy + Redis)
- Creating new database managers or service layers when existing ones can be fixed
- Writing alternative implementations instead of debugging current code
- Adding new dependencies to avoid fixing configuration issues

### ✅ INSTEAD, Always:
- **Fix existing files** in place
- **Debug configuration issues** in current architecture
- **Update environment variables** or connection strings
- **Mock dependencies** in tests without changing application code
- **Use existing patterns** from [services/](mdc:services/) microservices and [shared/](mdc:shared/) components

## Current Architecture (DO NOT CHANGE):
- **Microservices**: [services/](mdc:services/) - Independent FastAPI services
  - **Training Service**: [services/training_service/main.py](mdc:services/training_service/main.py) - Model training
  - **Inference Service**: [services/inference_service/main.py](mdc:services/inference_service/main.py) - Real-time predictions
  - **Plot Service**: [services/plot_service/main.py](mdc:services/plot_service/main.py) - Data visualization
  - **Healthcheck Service**: [services/healthcheck_service/main.py](mdc:services/healthcheck_service/main.py) - System monitoring
- **Shared Components**: [shared/](mdc:shared/) - Common models and utilities
  - **ML Models**: [shared/models/anomaly/](mdc:shared/models/anomaly/) - 3-sigma detection algorithm
  - **Database**: [shared/database/](mdc:shared/database/) - SQLAlchemy models and connections
  - **Core**: [shared/core/](mdc:shared/core/) - Base classes and data models

## Problem-Solving Approach:
1. **Identify the root cause** (e.g., SQLite + async incompatibility)
2. **Fix configuration** (change DATABASE_URL to async driver)
3. **Update existing code** with proper error handling
4. **Test with correct setup** (use aiosqlite for SQLite async)
5. **Document the fix** in comments

## Configuration Fixes, Not Code Rewrites:
- SQLite async issue → Use `sqlite+aiosqlite://` connection string in [shared/database/config.py](mdc:shared/database/config.py)
- Redis connection → Update REDIS_URL in service environment variables
- Database initialization → Add proper error handling to [shared/database/database.py](mdc:shared/database/database.py)
- Service communication → Fix service URLs in [config/env_config.yaml](mdc:config/env_config.yaml)
- Test failures → Fix test configuration in [tests/conftest.py](mdc:tests/conftest.py), not service architecture