---
alwaysApply: true
---

# File Creation Discipline - Stop Creating New Files

## Rule: Modify, Don't Multiply

**Maximum file creation per issue: 0 (unless explicitly required by user)**

### ❌ FORBIDDEN Actions:
- Creating temporary/alternative versions of existing files
- Writing "test" or "minimal" versions of main application files
- Adding scripts to "fix" problems that should be solved in existing code
- Creating new main.py variations when debugging configuration
- Writing setup scripts when the issue is in existing configuration

### ✅ ALLOWED File Creation Only When:
- **User explicitly requests** a new feature requiring new files
- **Test files missing** for new functionality (following [testing-standards](mdc:.cursor/rules/testing-standards.mdc))
- **Configuration files** that don't exist yet (e.g., missing .env)
- **Documentation** explicitly requested

## Current Files - MODIFY THESE:
**Microservices**:
- [services/training_service/main.py](mdc:services/training_service/main.py) - Training service
- [services/inference_service/main.py](mdc:services/inference_service/main.py) - Inference service
- [services/plot_service/main.py](mdc:services/plot_service/main.py) - Plot service
- [services/healthcheck_service/main.py](mdc:services/healthcheck_service/main.py) - Health service

**Shared Components**:
- [shared/database/database.py](mdc:shared/database/database.py) - Database management
- [shared/database/models.py](mdc:shared/database/models.py) - Database models
- [shared/models/anomaly/](mdc:shared/models/anomaly/) - ML models
- [shared/core/](mdc:shared/core/) - Base classes

**Configuration & Tests**:
- [config/env_config.yaml](mdc:config/env_config.yaml) - Environment config
- [tests/conftest.py](mdc:tests/conftest.py) - Test configuration
- Service-specific [requirements.txt](mdc:services/training_service/requirements.txt) files

## Problem-Solving Pattern:
1. **Read existing file** to understand current implementation
2. **Identify specific line/section** causing the issue
3. **Modify existing code** with proper fix
4. **Test the fix** with existing test files
5. **Update documentation** in existing README/comments

## Examples of Proper Fixes:
- SQLite async issue → Fix connection string in [shared/database/config.py](mdc:shared/database/config.py)
- Service communication → Update URLs in [config/env_config.yaml](mdc:config/env_config.yaml)
- Test failures → Update [tests/conftest.py](mdc:tests/conftest.py) with proper mocks
- Dependencies missing → Add to service-specific requirements.txt
- Model issues → Fix algorithm in [shared/models/anomaly/ml_model.py](mdc:shared/models/anomaly/ml_model.py)

## Before Creating ANY New File, Ask:
1. Can this be fixed by modifying existing code?
2. Is this configuration/environment issue?
3. Does the user explicitly want a new file?
4. Will this new file be permanent or just a workaround?

**If answers are Yes, Yes, No, Workaround → DO NOT CREATE THE FILE**