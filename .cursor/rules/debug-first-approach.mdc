---
globs: *.py,*.yml,*.yaml,*.json,*.md
---

# Debug-First Approach - Fix Root Causes

## Methodology: Debug → Fix → Test

When encountering errors, follow this sequence:

### 1. **Analyze the Error Message**
- Read the full stack trace
- Identify the exact line and file causing the issue
- Understand the root cause (configuration, dependency, logic)

### 2. **Research the Existing Codebase**
- Use `grep` or `codebase_search` to understand current patterns
- Look at how similar functionality is implemented
- Check configuration files for relevant settings

### 3. **Apply Minimal Fix**
- Change only what's necessary to fix the root cause
- Maintain existing architecture and patterns
- Add error handling if missing

### 4. **Test the Fix**
- Run relevant tests to verify the fix
- Ensure no regression in other functionality
- Update tests if behavior changed intentionally

## Common Issues and Proper Fixes:

### SQLite + Async Issue:
```python
# ❌ DON'T: Create new database manager
# ✅ DO: Fix connection string in app/config.py
database_url: str = "sqlite+aiosqlite:///./test.db"
```

### Test Configuration Issues:
```python
# ❌ DON'T: Create new test files
# ✅ DO: Update conftest.py with proper setup
os.environ["DATABASE_URL"] = "sqlite+aiosqlite:///test.db"
```

### Missing Dependencies:
```bash
# ❌ DON'T: Create alternative requirements file
# ✅ DO: Add missing package to requirements.txt
echo "aiosqlite" >> requirements.txt
```

## Red Flags - Stop and Debug Instead:
- "Let me create a minimal version..."
- "I'll write a simple alternative..."
- "Let me make a temporary fix..."
- "I'll create a test version..."

## Questions to Ask Before Any Change:
1. What exactly is failing and why?
2. Is this a configuration issue?
3. Can I fix this with a 1-3 line change?
4. Am I maintaining the existing architecture?